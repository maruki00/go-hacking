package core

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"io"
	"net"
	"os"
)

func RunCommand(cmd string) string {
	return ""
}

func SendFile(conn *net.Conn, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		panic("file does not exists")
	}
	defer file.Close()
	fileInfo, _ := file.Stat()
	fileBytes := make([]byte, fileInfo.Size())
	_, err = file.Read(fileBytes)
	if err != nil {
		panic("could not read the file")
	}

	binary.Write(*conn, binary.LittleEndian, fileInfo.Size())

	_, err = io.CopyN(*conn, bytes.NewReader(fileBytes), fileInfo.Size())
	if err != nil {
		panic("could not stream the file")
	}
}

func SaveFile(conn net.Conn, filePath string) {
	file, err := os.Create(filePath)
	if err != nil {
		panic("could not create the file or already exists")
	}
	defer file.Close()
	buf := new(bytes.Buffer)
	sizeFile := int64(0)
	for {
		binary.Read(conn, binary.LittleEndian, sizeFile)
		fmt.Println("recieve ", sizeFile, " bytes")
		n, err := io.CopyN(buf, conn, sizeFile)
		if err != nil {
			panic(err)
		}

		fmt.Println("data written over the network :", n)
		fmt.Println(buf.Bytes())
		break
	}
	return

}
